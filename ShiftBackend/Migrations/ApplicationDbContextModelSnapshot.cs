// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShiftBackend.Data;

#nullable disable

namespace ShiftBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShiftBackend.Models.ShiftModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AddEarlyOut")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "addEarlyOut");

                    b.Property<bool>("AddLateIn")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "addLateIn");

                    b.Property<string>("AttendanceType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "attendanceType");

                    b.Property<string>("BreakDuration")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "breakDuration");

                    b.Property<int?>("BreakEarlyOut")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "breakEarlyOut");

                    b.Property<bool>("BreakEarlyOutOverlap")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "breakEarlyOutOverlap");

                    b.Property<string>("BreakEnd")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "breakEnd");

                    b.Property<int?>("BreakLateIn")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "breakLateIn");

                    b.Property<bool>("BreakLateInOverlap")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "breakLateInOverlap");

                    b.Property<string>("BreakStart")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "breakStart");

                    b.Property<bool>("Deduct2PlusPunch")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "deduct2PlusPunch");

                    b.Property<string>("Deduct2PlusPunchType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "deduct2PlusPunchType");

                    b.Property<bool>("Deduct2Punch")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "deduct2Punch");

                    b.Property<string>("Deduct2PunchType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "deduct2PunchType");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<bool>("DeviationAllowed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "deviationAllowed");

                    b.Property<int?>("DeviationEnd")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "deviationEnd");

                    b.Property<int?>("DeviationStart")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "deviationStart");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "duration");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "endTime");

                    b.Property<string>("FullDay")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "fullDay");

                    b.Property<string>("HalfDay")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "halfDay");

                    b.Property<bool>("IncludeGraceTime")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "includeGraceTime");

                    b.Property<bool?>("MinHoursRequired")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "minHoursRequired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<bool?>("ShiftAllowance")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftAllowance");

                    b.Property<int?>("ShiftEarlyOut")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftEarlyOut");

                    b.Property<bool>("ShiftEarlyOutOverlap")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftEarlyOutOverlap");

                    b.Property<int?>("ShiftLateIn")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftLateIn");

                    b.Property<bool>("ShiftLateInOverlap")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftLateInOverlap");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "startTime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.ToTable("Shifts");
                });
#pragma warning restore 612, 618
        }
    }
}
